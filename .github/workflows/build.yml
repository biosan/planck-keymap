
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


name: QMK firmware build and publish


jobs:
  build:
    name: Build & publish
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build firmware
        run: |
          ./build.sh

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Get binary name
        id: get-binary-name
        run: |
          echo ::set-output name=bin-name::$(ls ./binary | grep .bin | head -1 | cut -f 1 -d '.')

      # - name: Get commit tag
      #   id: get-commit-tag
      #   run: |
      #     echo ::set-output name=tag::$(echo ${GITHUB_REF:10})

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./binary/${{ steps.get-binary-name.outputs.bin-name}}.bin
          asset_name: ${{ steps.get-binary-name.outputs.bin-name }}.bin
          asset_content_type: application/octet-stream
          # asset_name: ${{ steps.get-binary-name.outputs.bin-name }}_${{ steps.get-commit-tag.outputs.tag }}.bin

